










Introduction - Polars User Guide


















          Skip to content
        















            Polars User Guide
          



            
              Introduction
            
          



































            Initializing search
          












    pola-rs/polars
  








      Home
    



        Getting Started
      



        User Guide
      
















    Polars User Guide
  






    pola-rs/polars
  





        Home
      




          Getting Started
          




          Getting Started
        



        Introduction
      



        Installation
      



        Series & DataFrames
      



        Reading & Writing
      



        Expressions
      



        Combining DataFrames
      







          User Guide
          




          User Guide
        




          Introduction
          


        Introduction
      



      Table of contents
    



    Philosophy
  






        Installation
      




          Concepts
          




          Concepts
        



        Data types
      



        Data Structures
      



        Contexts
      



        Expressions
      



        Lazy / Eager API
      



        Streaming API
      







          Expressions
          




          Expressions
        



        Basic Operators
      



        Column Selections
      



        Functions
      



        Casting
      



        Strings
      



        Aggregation
      



        Missing data
      



        Window functions
      



        Folds
      



        Lists and Arrays
      



        User Defined functions
      



        The Struct datatype
      



        Numpy
      







          Transformations
          




          Transformations
        



        Joins
      



        Concatenation
      



        Pivots
      



        Melts
      




          Time Series
          




          Time Series
        



        Parsing
      



        Filtering
      



        Grouping
      



        Resampling
      



        Time zones
      










          Lazy API
          




          Lazy API
        



        Usage
      



        Optimizations
      



        Schema
      



        Query Plan
      



        Query execution
      



        Streaming
      







          IO
          




          IO
        



        CSV
      



        Parquet
      



        JSON files
      



        Multiple
      



        Databases
      



        AWS
      



        Google BigQuery
      







          SQL
          




          SQL
        



        Introduction
      



        SHOW TABLES
      



        SELECT
      



        CREATE
      



        Common Table Expressions
      







          Migrating
          




          Migrating
        



        Coming from Pandas
      



        Coming from Apache Spark
      







          Misc
          




          Misc
        



        Multiprocessing
      



        Alternatives
      



        Reference Guides
      



        Contributing
      


















      Table of contents
    



    Philosophy
  








Introduction
This User Guide is an introduction to the Polars DataFrame library. Its goal is to introduce you to Polars by going through examples and comparing it to other
solutions. Some design choices are introduced here. The guide will also introduce you to optimal usage of Polars.
Even though Polars is completely written in Rust (no runtime overhead!) and uses Arrow -- the
native arrow2 Rust implementation -- as its foundation, the examples presented in this guide will be mostly using its higher-level language
bindings. Higher-level bindings only serve as a thin wrapper for functionality implemented in the core library.
For Pandas users, our Python package will offer the easiest way to get started with Polars.
Philosophy
The goal of Polars is to provide a lightning fast DataFrame library that:

Utilizes all available cores on your machine.
Optimizes queries to reduce unneeded work/memory allocations. 
Handles datasets much larger than your available RAM.
Has an API that is consistent and predictable.
Has a strict schema (data-types should be known before running the query).

Polars is written in Rust which gives it C/C++ performance and allows it to fully control performance critical parts
in a query engine.
As such Polars goes to great lengths to:

Reduce redundant copies.
Traverse memory cache efficiently.
Minimize contention in parallelism.
Process data in chunks.
Reuse memory allocations.














                Previous
              

                Combining DataFrames
              





                Next
              

                Installation
              









  
  
    Made with
    
      Material for MkDocs
    












Cookie consent
We use cookies to recognize your repeated visits and preferences, as well as to measure the effectiveness of our documentation and whether users find what they're searching for. With your consent, you're helping us to make our documentation better.







          Google Analytics
        





          GitHub
        




Accept
Manage settings








